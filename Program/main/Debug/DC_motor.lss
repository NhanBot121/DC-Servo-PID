
DC_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800092  00800092  00000474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a44  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000634  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000677  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 01 	call	0x250	; 0x250 <main>
  8a:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_init>:
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
	delay(200);
  92:	82 e6       	ldi	r24, 0x62	; 98
  94:	80 b9       	out	0x00, r24	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	86 bf       	out	0x36, r24	; 54
  9a:	11 b8       	out	0x01, r1	; 1
  9c:	08 95       	ret

0000009e <i2c_start>:
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <i2c_start+0x4>
  a8:	08 95       	ret

000000aa <i2c_write>:
  aa:	83 b9       	out	0x03, r24	; 3
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <i2c_write+0x6>
  b6:	08 95       	ret

000000b8 <delay>:
  b8:	99 23       	and	r25, r25
  ba:	54 f4       	brge	.+20     	; 0xd0 <delay+0x18>
  bc:	08 95       	ret
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	31 09       	sbc	r19, r1
  c2:	e9 f7       	brne	.-6      	; 0xbe <delay+0x6>
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	84 17       	cp	r24, r20
  ca:	95 07       	cpc	r25, r21
  cc:	1c f4       	brge	.+6      	; 0xd4 <delay+0x1c>
  ce:	08 95       	ret
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	29 e7       	ldi	r18, 0x79	; 121
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <delay+0x6>

000000da <toggle>:
  da:	19 9a       	sbi	0x03, 1	; 3
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	86 bf       	out	0x36, r24	; 54
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <toggle+0x6>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <delay>
  ee:	19 98       	cbi	0x03, 1	; 3
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	86 bf       	out	0x36, r24	; 54
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <toggle+0x1a>
  fa:	08 95       	ret

000000fc <lcd_cmd_hf>:
  fc:	18 98       	cbi	0x03, 0	; 3
  fe:	94 e8       	ldi	r25, 0x84	; 132
 100:	96 bf       	out	0x36, r25	; 54
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <lcd_cmd_hf+0x6>
 108:	93 b1       	in	r25, 0x03	; 3
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	93 b9       	out	0x03, r25	; 3
 10e:	94 e8       	ldi	r25, 0x84	; 132
 110:	96 bf       	out	0x36, r25	; 54
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <lcd_cmd_hf+0x16>
 118:	93 b1       	in	r25, 0x03	; 3
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	89 2b       	or	r24, r25
 11e:	83 b9       	out	0x03, r24	; 3
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	86 bf       	out	0x36, r24	; 54
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <lcd_cmd_hf+0x28>
 12a:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 12e:	08 95       	ret

00000130 <lcd_cmd>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	18 98       	cbi	0x03, 0	; 3
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	86 bf       	out	0x36, r24	; 54
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <lcd_cmd+0xa>
 140:	83 b1       	in	r24, 0x03	; 3
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	83 b9       	out	0x03, r24	; 3
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	86 bf       	out	0x36, r24	; 54
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <lcd_cmd+0x1a>
 150:	83 b1       	in	r24, 0x03	; 3
 152:	9c 2f       	mov	r25, r28
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	89 2b       	or	r24, r25
 158:	83 b9       	out	0x03, r24	; 3
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	86 bf       	out	0x36, r24	; 54
 15e:	06 b6       	in	r0, 0x36	; 54
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <lcd_cmd+0x2e>
 164:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 168:	83 b1       	in	r24, 0x03	; 3
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	83 b9       	out	0x03, r24	; 3
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	86 bf       	out	0x36, r24	; 54
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <lcd_cmd+0x42>
 178:	23 b1       	in	r18, 0x03	; 3
 17a:	30 e1       	ldi	r19, 0x10	; 16
 17c:	c3 9f       	mul	r28, r19
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	83 b9       	out	0x03, r24	; 3
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	86 bf       	out	0x36, r24	; 54
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <lcd_cmd+0x5a>
 190:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_init>:
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1c8:	08 95       	ret

000001ca <lcd_dwr>:
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
 1ce:	18 9a       	sbi	0x03, 0	; 3
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	86 bf       	out	0x36, r24	; 54
 1d4:	06 b6       	in	r0, 0x36	; 54
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <lcd_dwr+0xa>
 1da:	83 b1       	in	r24, 0x03	; 3
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	83 b9       	out	0x03, r24	; 3
 1e0:	84 e8       	ldi	r24, 0x84	; 132
 1e2:	86 bf       	out	0x36, r24	; 54
 1e4:	06 b6       	in	r0, 0x36	; 54
 1e6:	07 fe       	sbrs	r0, 7
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <lcd_dwr+0x1a>
 1ea:	83 b1       	in	r24, 0x03	; 3
 1ec:	9c 2f       	mov	r25, r28
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	89 2b       	or	r24, r25
 1f2:	83 b9       	out	0x03, r24	; 3
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	86 bf       	out	0x36, r24	; 54
 1f8:	06 b6       	in	r0, 0x36	; 54
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <lcd_dwr+0x2e>
 1fe:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 202:	83 b1       	in	r24, 0x03	; 3
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	83 b9       	out	0x03, r24	; 3
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	86 bf       	out	0x36, r24	; 54
 20c:	06 b6       	in	r0, 0x36	; 54
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <lcd_dwr+0x42>
 212:	23 b1       	in	r18, 0x03	; 3
 214:	30 e1       	ldi	r19, 0x10	; 16
 216:	c3 9f       	mul	r28, r19
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	82 2b       	or	r24, r18
 21e:	83 b9       	out	0x03, r24	; 3
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	86 bf       	out	0x36, r24	; 54
 224:	06 b6       	in	r0, 0x36	; 54
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <lcd_dwr+0x5a>
 22a:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <lcd_msg>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	88 81       	ld	r24, Y
 23a:	88 23       	and	r24, r24
 23c:	31 f0       	breq	.+12     	; 0x24a <lcd_msg+0x18>
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_dwr>
 244:	89 91       	ld	r24, Y+
 246:	81 11       	cpse	r24, r1
 248:	fb cf       	rjmp	.-10     	; 0x240 <lcd_msg+0xe>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <main>:
char speed = 0;

int main(void)
{
	// Port Config
	DDRB &= ~(1<<PB1);				// PB1 input for direction control 
 250:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1<<1);				// Activate Pull up -> keep it high
 252:	c1 9a       	sbi	0x18, 1	; 24
	DDRA = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;					// Port C as output
 258:	84 bb       	out	0x14, r24	; 20
	//PORTA = 0xff;
	
	// Phase correct PWM mode programming of Timer0
	DDRB |= (1<<PB3);				// Make PB3 output pin for pulse
 25a:	bb 9a       	sbi	0x17, 3	; 23
	OCR0 = dc[i];					// for 25% duty cycle in non inverted phase correct PWM
 25c:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <i>
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	e0 5a       	subi	r30, 0xA0	; 160
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 81       	ld	r24, Z
 268:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = 0x61;					// Phase correct PWM, Non inverted 15.686 khz, 8Mhz crystal, so N = 1
 26a:	81 e6       	ldi	r24, 0x61	; 97
 26c:	83 bf       	out	0x33, r24	; 51
	
	// External interrupt INT0 for speed control 
	DDRD &= ~(1<<PD2);				// Make PD2 an input pin (INT0 pin)
 26e:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<PD2);				// Activate pull up -> keep it high
 270:	92 9a       	sbi	0x12, 2	; 18
	MCUCSR = 0x02;					// Make interrupt0 negative edge triggered
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	84 bf       	out	0x34, r24	; 52
	GICR = (1<<INT0);				// Enable external interrupt0
 276:	80 e4       	ldi	r24, 0x40	; 64
 278:	8b bf       	out	0x3b, r24	; 59
	sei();							// enable interrupts
 27a:	78 94       	sei
	
	// External interrupt INT2 for counting Pulses
	MCUCSR &= ~(0<<ISC2);			// falling-edge triggered
 27c:	84 b7       	in	r24, 0x34	; 52
 27e:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);				// Enable INT2
 280:	8b b7       	in	r24, 0x3b	; 59
 282:	80 62       	ori	r24, 0x20	; 32
 284:	8b bf       	out	0x3b, r24	; 59

	// Using Timer2 to create sampling time
	TCCR2 = 0x07;					// Prescaler = 1024
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 60;						// count for 25ms
 28a:	8c e3       	ldi	r24, 0x3C	; 60
 28c:	84 bd       	out	0x24, r24	; 36
	TIMSK |= (1<<TOIE2);			// Enable overflow interrupt of Timer2 
 28e:	89 b7       	in	r24, 0x39	; 57
 290:	80 64       	ori	r24, 0x40	; 64
 292:	89 bf       	out	0x39, r24	; 57
	
	// Initializing LCD
	i2c_init();
 294:	0e 94 49 00 	call	0x92	; 0x92 <i2c_init>
	i2c_start();
 298:	0e 94 4f 00 	call	0x9e	; 0x9e <i2c_start>
	i2c_write(0x70);
 29c:	80 e7       	ldi	r24, 0x70	; 112
 29e:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_write>
	lcd_init();
 2a2:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
    {
		// Direction
		if(sw == 0)					// if switch is pushed -> change direction
		    PORTA = 0x01; 
		else                        // switch not pushed
			PORTA = 0x02;			
 2a6:	d2 e0       	ldi	r29, 0x02	; 2
	lcd_init();
    while (1) 
    {
		// Direction
		if(sw == 0)					// if switch is pushed -> change direction
		    PORTA = 0x01; 
 2a8:	c1 e0       	ldi	r28, 0x01	; 1
	i2c_write(0x70);
	lcd_init();
    while (1) 
    {
		// Direction
		if(sw == 0)					// if switch is pushed -> change direction
 2aa:	b1 99       	sbic	0x16, 1	; 22
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <main+0x62>
		    PORTA = 0x01; 
 2ae:	cb bb       	out	0x1b, r28	; 27
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <main+0x64>
		else                        // switch not pushed
			PORTA = 0x02;			
 2b2:	db bb       	out	0x1b, r29	; 27
		OCR0 = dc[i];
 2b4:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <i>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 5a       	subi	r30, 0xA0	; 160
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	8c bf       	out	0x3c, r24	; 60
			samples_count = 0;
			Pulses = 0;
		}
		*/ 
		
		lcd_cmd(0x80); // force cursor to the beginning of the 1st line
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
		if(i==0)
 2c8:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <i>
 2cc:	81 11       	cpse	r24, r1
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <main+0x8a>
		{
			lcd_msg("D.C: 25%");
 2d0:	84 e6       	ldi	r24, 0x64	; 100
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <main+0xae>
		}
		else if (i==1)
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <main+0x98>
		{
			lcd_msg("D.C: 50%");
 2de:	8d e6       	ldi	r24, 0x6D	; 109
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <main+0xae>
		}
		else if (i == 2)
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <main+0xa6>
		{
			lcd_msg("D.C: 75%");
 2ec:	86 e7       	ldi	r24, 0x76	; 118
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <main+0xae>
		}
		else
		{
			lcd_msg("D.C: 100%");
 2f6:	8f e7       	ldi	r24, 0x7F	; 127
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
		}
		//lcd_msg(speed); // display input dc
		lcd_cmd(0xC0); // force cursor to the beginning of the 2nd line 
 2fe:	80 ec       	ldi	r24, 0xC0	; 192
 300:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
		lcd_msg("Speed: ");
 304:	89 e8       	ldi	r24, 0x89	; 137
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
	}
 30c:	ce cf       	rjmp	.-100    	; 0x2aa <main+0x5a>

0000030e <__vector_1>:
}


// Interrupt Service Routine
ISR(INT0_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
	i++;
 31a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <i>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
	if(i>3) i = 0;
 320:	84 30       	cpi	r24, 0x04	; 4
 322:	18 f4       	brcc	.+6      	; 0x32a <__vector_1+0x1c>


// Interrupt Service Routine
ISR(INT0_vect)
{
	i++;
 324:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <i>
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_1+0x20>
	if(i>3) i = 0;
 32a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <i>
}
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_5>:

// Samples count
ISR(TIMER2_OVF_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	TCNT2 = 60; 
 346:	8c e3       	ldi	r24, 0x3C	; 60
 348:	84 bd       	out	0x24, r24	; 36
	samples_count++;
 34a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
}
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_3>:

// Pulses count
ISR(INT2_vect)
{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
	  Pulses++;
 372:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <Pulses>
 376:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <Pulses+0x1>
 37a:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <Pulses+0x2>
 37e:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <Pulses+0x3>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	a1 1d       	adc	r26, r1
 386:	b1 1d       	adc	r27, r1
 388:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <Pulses>
 38c:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <Pulses+0x1>
 390:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <Pulses+0x2>
 394:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <Pulses+0x3>
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
